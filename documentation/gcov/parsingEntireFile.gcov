        -:    0:Source:functions.c
        -:    0:Graph:functions.gcno
        -:    0:Data:functions.gcda
        -:    0:Runs:11
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <stdbool.h>
        -:    5:#include "functions.h"
        -:    6:#include "globals.h"
        -:    7:#include "structures.h"
        -:    8:
        -:    9:
        -:   10:
        1:   11:struct ParsedFile *parseFile(char* filelocation){
        1:   12:     struct ParsedFile *temp = (struct ParsedFile*)malloc(sizeof(struct ParsedFile));;
        1:   13:     temp->head = NULL;
        1:   14:     temp->count = 0;
        -:   15:
        1:   16:     FILE *fileptr = fopen(filelocation,"r");
        -:   17:
        1:   18:     if(fileptr == NULL){
    #####:   19:          printf("BAD FILE");
    #####:   20:          return NULL;
        -:   21:     }
        -:   22:
        -:   23:     char data[256];
        -:   24:     char totalData[10000];
        9:   25:     while(fgets(data,256,fileptr) != NULL){
        8:   26:          strcat(totalData,data);
        -:   27:     }
        -:   28:
        1:   29:     parseLines(totalData,NULL,temp,2);
        1:   30:     return temp;
        -:   31:}
        -:   32:
       18:   33:struct ParsedLine *parseLines(char *lines, struct ParsedLine *attachTo,struct ParsedFile *mainFile,int which){
       18:   34:     if(attachTo == NULL && which != 2){
    #####:   35:          return NULL;
        -:   36:     }
       18:   37:     if(strcmp(lines,"") == 0){
        3:   38:          return NULL;
        -:   39:     }
       15:   40:     char *label = obtainLabelName(lines);
       15:   41:     if(strcmp(label,"") == 0){
        7:   42:          return NULL;
        -:   43:     }
        8:   44:     printf("|%s|\n",label);
        8:   45:     mainFile->count += 1;
        8:   46:     char *totalData = obtainInnerData(lines);
        8:   47:     if(which == 0){
        3:   48:          attachTo->next = createLine(label,"",totalData);
        -:   49:     }
        5:   50:     else if(which == 1){
        3:   51:          attachTo->InnerTextParsed = createLine(label,"",totalData);
        -:   52:     }
        -:   53:     else{
        2:   54:          mainFile->head = createLine(label,"",totalData);
        -:   55:     }
        -:   56:
        8:   57:     int totalBlockSize = 2*strlen(label) + 5 + strlen(totalData);
        -:   58:
        -:   59:
        -:   60:     //Obtain the Inner Text 
        8:   61:     if(which == 2){
        2:   62:          parseLines(totalData,mainFile->head,mainFile,1);
        2:   63:          parseLines(strchr(lines,'<') + totalBlockSize,mainFile->head,mainFile,0);
        -:   64:     }
        6:   65:     else if(which == 1){
        3:   66:          parseLines(totalData,attachTo->InnerTextParsed,mainFile,1);
        -:   67:          //Obtain the *Next statements
        3:   68:          parseLines(strchr(lines,'<') + totalBlockSize,attachTo->InnerTextParsed,mainFile,0);
        -:   69:     }
        -:   70:     else{
        3:   71:          parseLines(totalData,attachTo->next,mainFile,1);
        -:   72:          //Obtain the *Next statements
        3:   73:          parseLines(strchr(lines,'<') + totalBlockSize,attachTo->next,mainFile,0);
        -:   74:     }
        8:   75:     return NULL;
        -:   76:}
        -:   77:
        9:   78:struct ParsedLine *createLine(char* Label, char* Tag, char* InnerText){
        9:   79:     struct ParsedLine *temp = (struct ParsedLine *)malloc(sizeof(struct ParsedLine));
        9:   80:     struct ParsedLine *temp2 = (struct ParsedLine *)malloc(sizeof(struct ParsedLine));
        9:   81:     strcpy(temp2->Label,"a");
        9:   82:     memset(temp->Label,'\0',100);
        9:   83:     memset(temp->Tag,'\0',100);
        9:   84:     memset(temp->InnerText,'\0',10000);
        9:   85:     strcpy(temp->Label,Label);
        9:   86:     strcpy(temp->Tag,Tag);
        9:   87:     strcpy(temp->InnerText,InnerText);
        9:   88:     temp->count = 0;
        9:   89:     temp->next = NULL;
        9:   90:     temp->prev = NULL;
        9:   91:     temp->InnerTextParsed = NULL;
        -:   92:
        9:   93:     return temp;
        -:   94:}
        -:   95:
        -:   96:
        -:   97:
        2:   98:void saveFileState(char* outputFileName){
        -:   99:     FILE *fileptr;
        -:  100:     FILE *outputFilePtr;
        2:  101:     fileptr = fopen(GlobalUserInputtedFileName,"r");
        -:  102:
        2:  103:     if(fileptr == NULL){
        1:  104:          strcpy(GlobalUserInputtedFileName,"");
        1:  105:          return;
        -:  106:     }
        1:  107:     outputFilePtr = fopen(outputFileName,"w");
        -:  108:     char data[256];
        2:  109:     while(fgets(data,256,fileptr) != NULL){
        1:  110:          fprintf(outputFilePtr,"%s",data);
        -:  111:     }
        1:  112:     fclose(fileptr);
        1:  113:     fclose(outputFilePtr);
        -:  114:}
        -:  115:
        -:  116://!Given string of label, convert to closing blocks
       11:  117:char* obtainClosingBlock(char* label){
       11:  118:     int labelLen = strlen(label);
       11:  119:     char *closingBlock = (char*)malloc(labelLen+1);
       11:  120:     closingBlock[0] = '<';
       11:  121:     closingBlock[1] = '/';
       11:  122:     strcat(closingBlock,label);
       11:  123:     strcat(closingBlock,">");
       11:  124:     return closingBlock;
        -:  125:};
        -:  126:
        -:  127:
        -:  128://! Given string, obtain nearest label (does not consider tag)
       27:  129:char* obtainLabelName(char* string){
        -:  130:     char duplicate[10000];
        -:  131:     char *before;
       27:  132:     if(strcmp(string,"") == 0){
    #####:  133:          return "";
        -:  134:     }
       27:  135:     if(strchr(string,'>') == NULL){
        7:  136:          return  "";
        -:  137:     }
        -:  138:
       20:  139:     strcpy(duplicate,string);
       20:  140:     before = strtok(duplicate,">");
       20:  141:     if(before == NULL){
    #####:  142:          return "";
        -:  143:     }
       20:  144:     before = strchr(before,'<')+ 1;
       20:  145:     char *returnStatement = (char *)malloc(sizeof(before));
       20:  146:     strcpy(returnStatement,before);
       20:  147:     return returnStatement;
        -:  148:}
        -:  149:
        -:  150://! Will obtain all data in between nearest opening and closing blocks, fails to free pointers
       10:  151:char* obtainInnerData(char * string){
       10:  152:     char* Label = obtainLabelName(string);
       10:  153:     char *ClosingBlock = obtainClosingBlock(Label);
        -:  154:
       10:  155:     char *dup = (char *)malloc(strlen(string));
       10:  156:     string = strchr(string,'<');
       10:  157:     memcpy(dup,string + strlen(Label) + 2,strlen(string));
       10:  158:     char *cur = dup;
      347:  159:     while(strcmp(cur,"\0") != 0){
      347:  160:          if(strncmp(cur,ClosingBlock,strlen(ClosingBlock)) == 0){
       10:  161:               memset(cur,'\0',1);
       10:  162:               return dup;
        -:  163:          }
      337:  164:          cur += 1;
        -:  165:     }
        -:  166:
    #####:  167:     return "";
        -:  168:}
        -:  169:
    #####:  170:void help() {
    #####:  171:     return;
        -:  172:}
